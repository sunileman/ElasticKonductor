version: ${es_version}
nodeSets:
- name: master
  config:
    # most Elasticsearch configuration parameters are possible to set, e.g: node.attr.attr_name: attr_value
    node.roles: [${master_pod_roles}]
    #node.master: true
    #node.data: false
    #node.ingest: false
    #node.ml: false
    # this allows ES to run on nodes even if their vm.max_map_count has not been increased, at a performance cost
    #node.store.allow_mmap: false
    transport.compress: true
  podTemplate:
    metadata:
      labels:
        # additional labels for pods
        acceptIngest: "${master_accept_ingest}"
        acceptSearch: "${master_accept_search}"
      annotations:
        #co.elastic.metrics/module: elasticsearch-xpack
        #co.elastic.metrics/username: beat
        #co.elastic.metrics/password: beatbeatbeat
        #co.elastic.metrics/ssl.verification_mode: none
  ##expose Kubernetes node labels that should be exposed in the Elasticsearch Pods
  ##exposedNodeSelector:
  #exposed-node-labels: "nodetype"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodetype
                operator: In
                values:
                - master
      initContainers:
      # this changes the kernel setting on the node to allow ES to use mmap
      # if you uncomment this init container you will likely also want to remove the
      # "node.store.allow_mmap: false" setting above
      # initContainers:
      ###
      # uncomment the line below if you are using a service mesh such as linkerd2 that uses service account tokens for pod identification.
      # automountServiceAccountToken: true
      containers:
      - name: elasticsearch
        # specify resource limits and requests
        resources:
          limits:
            memory: ${master_pod_memory}
            cpu: ${master_pod_cpu}
        env:
        - name: ES_JAVA_OPTS
          value: ${master_pod_ES_JAVA_OPTS}
  count: ${master_pod_count}
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${master_pod_storage}
        storageClassName: ${master_pod_storage_class}
- name: hot
  config:
    # most Elasticsearch configuration parameters are possible to set, e.g: node.attr.attr_name: attr_value
    node.roles: [${hot_pod_roles}]
    #node.master: false
    #node.data: true
    #node.ingest: true
    #node.ml: true
    # this allows ES to run on nodes even if their vm.max_map_count has not been increased, at a performance cost
    #node.store.allow_mmap: false
    #hot node for ILM
    node.attr.data: hot
    transport.compress: true
  podTemplate:
    metadata:
      labels:
        # additional labels for pods
        acceptIngest: "${hot_accept_ingest}"
        acceptSearch: "${hot_accept_search}"
      annotations:
        #co.elastic.metrics/module: elasticsearch-xpack
        #co.elastic.metrics/username: beat
        #co.elastic.metrics/password: beatbeatbeat
        #co.elastic.metrics/ssl.verification_mode: none
    spec:
      initContainers:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodetype
                operator: In
                values:
                - hot
      # this changes the kernel setting on the node to allow ES to use mmap
      # if you uncomment this init container you will likely also want to remove the
      # "node.store.allow_mmap: false" setting above
      # initContainers:
      # - name: sysctl
      #   securityContext:
      #     privileged: true
      #   command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
      ###
      # uncomment the line below if you are using a service mesh such as linkerd2 that uses service account tokens for pod identification.
      # automountServiceAccountToken: true
      containers:
      - name: elasticsearch
        # specify resource limits and requests
        resources:
          limits:
            memory: ${hot_pod_memory}
            cpu: ${hot_pod_cpu}
        env:
        - name: ES_JAVA_OPTS
          value: ${hot_pod_ES_JAVA_OPTS}
      #affinity:
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: kubernetes.io/e2e-az-name
      #           operator: In
      #           values:
      #           - lolthisdoesntexist
  count: ${hot_pod_count}
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${hot_pod_storage}
        storageClassName: ${hot_pod_storage_class}
- name: warm
  config:
    # most Elasticsearch configuration parameters are possible to set, e.g: node.attr.attr_name: attr_value
    node.roles: [${warm_pod_roles}]
    #node.master: false
    #node.data: true
    #node.ingest: true
    #node.ml: true
    # this allows ES to run on nodes even if their vm.max_map_count has not been increased, at a performance cost
    #node.store.allow_mmap: false
    #hot node for ILM
    node.attr.data: warm 
    transport.compress: true
  podTemplate:
    metadata:
      labels:
        # additional labels for pods
        acceptIngest: "${warm_accept_ingest}"
        acceptSearch: "${warm_accept_search}"
      annotations:
        #co.elastic.metrics/module: elasticsearch-xpack
        #co.elastic.metrics/username: beat
        #co.elastic.metrics/password: beatbeatbeat
        #co.elastic.metrics/ssl.verification_mode: none
    spec:
      initContainers:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodetype
                operator: In
                values:
                - warm
      # this changes the kernel setting on the node to allow ES to use mmap
      # if you uncomment this init container you will likely also want to remove the
      # "node.store.allow_mmap: false" setting above
      # initContainers:
      # - name: sysctl
      #   securityContext:
      #     privileged: true
      #   command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
      ###
      # uncomment the line below if you are using a service mesh such as linkerd2 that uses service account tokens for pod identification.
      # automountServiceAccountToken: true
      containers:
      - name: elasticsearch
        # specify resource limits and requests
        resources:
          limits:
            memory: ${warm_pod_memory}
            cpu: ${warm_pod_cpu}
        env:
        - name: ES_JAVA_OPTS
          value: ${warm_pod_ES_JAVA_OPTS}
      #affinity:
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: kubernetes.io/e2e-az-name
      #           operator: In
      #           values:
      #           - lolthisdoesntexist
  count: ${warm_pod_count}
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${warm_pod_storage}
        storageClassName: ${warm_pod_storage_class}
- name: cold
  config:
    # most Elasticsearch configuration parameters are possible to set, e.g: node.attr.attr_name: attr_value
    node.roles: [${cold_pod_roles}]
    #node.master: false
    #node.data: true
    #node.ingest: true
    #node.ml: true
    # this allows ES to run on nodes even if their vm.max_map_count has not been increased, at a performance cost
    #node.store.allow_mmap: false
    #hot node for ILM
    node.attr.data: cold
    transport.compress: true
  podTemplate:
    metadata:
      labels:
        # additional labels for pods
        acceptIngest: "${cold_accept_ingest}"
        acceptSearch: "${cold_accept_search}"
      annotations:
        #co.elastic.metrics/module: elasticsearch-xpack
        #co.elastic.metrics/username: beat
        #co.elastic.metrics/password: beatbeatbeat
        #co.elastic.metrics/ssl.verification_mode: none
    spec:
      initContainers:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodetype
                operator: In
                values:
                - cold
      # this changes the kernel setting on the node to allow ES to use mmap
      # if you uncomment this init container you will likely also want to remove the
      # "node.store.allow_mmap: false" setting above
      # initContainers:
      # - name: sysctl
      #   securityContext:
      #     privileged: true
      #   command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
      ###
      # uncomment the line below if you are using a service mesh such as linkerd2 that uses service account tokens for pod identification.
      # automountServiceAccountToken: true
      containers:
      - name: elasticsearch
        # specify resource limits and requests
        resources:
          limits:
            memory: ${cold_pod_memory}
            cpu: ${cold_pod_cpu}
        env:
        - name: ES_JAVA_OPTS
          value: ${cold_pod_ES_JAVA_OPTS}
      #affinity:
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: kubernetes.io/e2e-az-name
      #           operator: In
      #           values:
      #           - lolthisdoesntexist
  count: ${cold_pod_count}
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${cold_pod_storage}
        storageClassName: ${cold_pod_storage_class}
- name: frozen
  config:
    # most Elasticsearch configuration parameters are possible to set, e.g: node.attr.attr_name: attr_value
    node.roles: [${frozen_pod_roles}]
    #node.master: false
    #node.data: true
    #node.ingest: true
    #node.ml: true
    # this allows ES to run on nodes even if their vm.max_map_count has not been increased, at a performance cost
    #node.store.allow_mmap: false
    #hot node for ILM
    node.attr.data: frozen
    transport.compress: true
  podTemplate:
    metadata:
      labels:
        # additional labels for pods
        acceptIngest: "${frozen_accept_ingest}"
        acceptSearch: "${frozen_accept_search}"
      annotations:
        #co.elastic.metrics/module: elasticsearch-xpack
        #co.elastic.metrics/username: beat
        #co.elastic.metrics/password: beatbeatbeat
        #co.elastic.metrics/ssl.verification_mode: none
    spec:
      initContainers:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodetype
                operator: In
                values:
                - frozen
      # this changes the kernel setting on the node to allow ES to use mmap
      # if you uncomment this init container you will likely also want to remove the
      # "node.store.allow_mmap: false" setting above
      # initContainers:
      # - name: sysctl
      #   securityContext:
      #     privileged: true
      #   command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
      ###
      # uncomment the line below if you are using a service mesh such as linkerd2 that uses service account tokens for pod identification.
      # automountServiceAccountToken: true
      containers:
      - name: elasticsearch
        # specify resource limits and requests
        resources:
          limits:
            memory: ${frozen_pod_memory}
            cpu: ${frozen_pod_cpu}
        env:
        - name: ES_JAVA_OPTS
          value: ${frozen_pod_ES_JAVA_OPTS}
      #affinity:
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: kubernetes.io/e2e-az-name
      #           operator: In
      #           values:
      #           - lolthisdoesntexist
  count: ${frozen_pod_count}
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${frozen_pod_storage}
        storageClassName: ${frozen_pod_storage_class}
- name: ml
  config:
    # most Elasticsearch configuration parameters are possible to set, e.g: node.attr.attr_name: attr_value
    node.roles: [${ml_pod_roles}]
    #node.master: false
    #node.data: true
    #node.ingest: true
    #node.ml: true
    # this allows ES to run on nodes even if their vm.max_map_count has not been increased, at a performance cost
    #node.store.allow_mmap: false
    #hot node for ILM
    node.attr.data: ml
    transport.compress: true
  podTemplate:
    metadata:
      labels:
        # additional labels for pods
        acceptIngest: "${ml_accept_ingest}"
        acceptSearch: "${ml_accept_search}"
      annotations:
        #co.elastic.metrics/module: elasticsearch-xpack
        #co.elastic.metrics/username: beat
        #co.elastic.metrics/password: beatbeatbeat
        #co.elastic.metrics/ssl.verification_mode: none
    spec:
      initContainers:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodetype
                operator: In
                values:
                - ml
      # this changes the kernel setting on the node to allow ES to use mmap
      # if you uncomment this init container you will likely also want to remove the
      # "node.store.allow_mmap: false" setting above
      # initContainers:
      # - name: sysctl
      #   securityContext:
      #     privileged: true
      #   command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
      ###
      # uncomment the line below if you are using a service mesh such as linkerd2 that uses service account tokens for pod identification.
      # automountServiceAccountToken: true
      containers:
      - name: elasticsearch
        # specify resource limits and requests
        resources:
          limits:
            memory: ${ml_pod_memory}
            cpu: ${ml_pod_cpu}
        env:
        - name: ES_JAVA_OPTS
          value: ${ml_pod_ES_JAVA_OPTS}
      #affinity:
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: kubernetes.io/e2e-az-name
      #           operator: In
      #           values:
      #           - lolthisdoesntexist
  count: ${ml_pod_count}
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${ml_pod_storage}
        storageClassName: ${ml_pod_storage_class}
# # inject secure settings into Elasticsearch nodes from k8s secrets references
# secureSettings:
# - secretName: ref-to-secret
# - secretName: another-ref-to-secret
#   # expose only a subset of the secret keys (optional)
#   entries:
#   - key: value1
#     path: newkey # project a key to a specific path (optional)
# # inject secure settings into Elasticsearch nodes from k8s secrets references
# secureSettings:
# - secretName: ref-to-secret
# - secretName: another-ref-to-secret
#   # expose only a subset of the secret keys (optional)
#   entries:
#   - key: value1
#     path: newkey # project a key to a specific path (optional)

http:
  tls:
  selfSignedCertificate:
    subjectAltNames:
    - dns: "*.cloudapp.azure.com"
